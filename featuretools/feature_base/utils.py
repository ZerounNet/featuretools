def get_primitive_value(feature):
    return feature.primitive.value


def convert_to_nth(integer):
    string_nth = str(integer)
    end_int = integer % 10
    if end_int == 1 and integer % 100 != 11:
        return str(integer) + 'st'
    elif end_int == 2:
        return str(string_nth) + 'nd'
    elif end_int == 3:
        return str(string_nth) + 'rd'
    else:
        return str(string_nth) + 'th'


PRIMITIVE_TEMPLATES_INLINE_FUNC = {
    'count': "the number of",
    'sum': "the sum of {}",
    'mean': "the average value of {}",
    'any': "whether any of {} are True",
    'mode': "the most frequently occurring value of {}",
    'first': "the first value of {}",
    'skew': "the skewness of {}",
    'n_most_common': [("the {num_outputs} most common values of {}", {'num_outputs': lambda feature: feature.number_output_features}),
                      ("the{slice_number}most common value of {}", {'slice_number': lambda feature: ' ' if feature.n == 0 else ' {} '.format(convert_to_nth(feature.n + 1))})],
    'num_unique': "the number of unique elements in {}",
    'time_since_first': "the time since the first value in {}",
    'min': "the minimum value of {}",
    'all': "whether all of {} are True",
    'last': "the last value of {}",
    'percent_true': "the percentage of True values in {}",
    'entropy': "the entropy of {}",
    'std': "the standard deviation of {}",
    'median': "the median value of {}",
    'avg_time_between': "the average time between each {}",
    'num_true': "the number of times {} is true",
    'trend': "the linear trend of {} over time",
    'time_since_last': "the time since the last {}",
    'max': "the maximum value of {}",
    'modulo_by_feature': ("the modulo of {scalar} by {}", {'scalar': get_primitive_value}),
    'add_numeric': "{} plus {}",
    'week': "the week of the year of {}",
    'num_words': "the number of words in {}",
    'cum_min': "the cumulative minimum of {}",
    'age': ('the age of the instance of "{entity_id}"', {'entity_id': lambda feature: feature.entity_id}),
    'modulo_numeric': "{} modulo {}",
    'not_equal': "whether {} is not equal to {}",
    'second': "the seconds value of {}",
    'weekday': "the day of the week of {}",
    'divide_numeric_scalar': ("{} divided by {value}", {'value': get_primitive_value}),
    'cum_count': 'the cumulative count of {}',
    'equal': 'whether {} equals {}',
    'day': 'the day of the month of {}',
    'haversine': 'the haversine distance between {} and {}',
    'year': 'the year of {}',
    'multiply_boolean': 'the product of {} and {}',
    'less_than_equal_to': 'whether {} is less than or equal to {}',
    'time_since_previous': 'the time since the previous instance of {}',
    'latitude': 'the latitude of {}',
    'greater_than': 'whether {} is greater than {}',
    'less_than': 'whether {} is less than {}',
    'multiply_numeric': 'the product of {} and {}',
    'not': 'the negation of ',
    'subtract_numeric_scalar': ('the value of {} minus {scalar}', {'scalar': get_primitive_value}),
    'greater_than_equal_to': 'whether {} is greater than or equal to {}',
    'diff': 'the difference from the previous value of {}',
    'and': 'whether {} and {} are True',
    'add_numeric_scalar': ('the sum of {} and {scalar}', {'scalar': get_primitive_value}),
    'time_since': 'the amount of time from the cutoff time to {}',
    'cum_max': 'the cumulative maximum of {}',
    'modulo_numeric_scalar': ('the modulo of {} by {scalar}', {'scalar': get_primitive_value}),
    'minute': 'the minute value of {}',
    'not_equal_scalar': ('whether {} does not equal {scalar}', {'scalar': get_primitive_value}),
    'num_characters': 'the number of characters in {}',
    'cum_mean': 'the cumulative mean of {}',
    'divide_by_feature': ('the result of dividing {scalar} by {}', {'scalar': get_primitive_value}),
    'equal_scalar': ('whether {} equals {scalar}', {'scalar': get_primitive_value}),
    'hour': 'the hour value of {}',
    'is_weekend': 'whether {} occured on the weekend',
    'divide_numeric': 'the quotient of {} and {}',
    'cum_sum': 'the cumulative sum of {}',
    'less_than_equal_to_scalar': ('whether {} is less than or equal to {scalar}', {'scalar': get_primitive_value}),
    'longitude': 'the longitude of {}',
    'month': 'the month of {}',
    'multiply_numeric_scalar': ('the product of {} and {scalar}', {'scalar': get_primitive_value}),
    'less_than_scalar': ('whether {} is less than {scalar}', {'scalar': get_primitive_value}),
    'absolute': 'the absolute value of {}',
    'percentile': 'the percentile rank of {}',
    'is_null': 'whether {} is null',
    'scalar_subtract_numeric_feature': ('the value of {scalar} minus {}', {'scalar': get_primitive_value}),
    'greater_than_equal_to_scalar': ('whether {} is greater than or equal to {scalar}', {'scalar': get_primitive_value}),
    'negate': 'the negation of {}',
    'or': 'whether {} or {} is True',
    'subtract_numeric': 'the result of {} minus {}',
    'greater_than_scalar': ('whether {} is greater than {scalar}', {'scalar': get_primitive_value}),
    'isin': ('whether {} is in {list_of_outputs}', {'list_of_outputs': lambda feature: ', '.join(feature.primitive.list_of_outputs)})
}


PRIMITIVE_TEMPLATES = {
    'count': "the number",
    'sum': "the sum of {}",
    'mean': "the average of {}",
    'any': "whether any of {} are True",
    'mode': "the most frequently occurring value of {}",
    'first': "the first value of {}",
    'skew': "the skewness of {}",
    'n_most_common': ["the {feature.number_output_features} most common values of {}",
                      "the {feature_slice} most common value of {}"],
    'num_unique': "the number of unique elements in {}",
    'time_since_first': "the time since the first value in {}",
    'min': "the minimum value of {}",
    'all': "whether all of {} are True",
    'last': "the last value of {}",
    'percent_true': "the percentage of True values in {}",
    'entropy': "the entropy of {}",
    'std': "the standard deviation of {}",
    'median': "the median value of {}",
    'avg_time_between': "the average time between each {}",
    'num_true': "the number of times {} is true",
    'trend': "the linear trend of {} over time",
    'time_since_last': "the time since the last {}",
    'max': "the maximum value of {}",
    'modulo_by_feature': "the modulo of {feature.primitive.value:} by {}",
    'add_numeric': "{} plus {}",
    'week': "the week of the year of {}",
    'num_words': "the number of words in {}",
    'cum_min': "the cumulative minimum of {}",
    'age': 'the current age from {}',
    'modulo_numeric': "{} modulo {}",
    'not_equal': "whether {} is not equal to {}",
    'second': "the seconds value of {}",
    'weekday': "the day of the week of {}",
    'divide_numeric_scalar': "{} divided by {feature.primitive.value}",
    'cum_count': 'the cumulative count of {}',
    'equal': 'whether {} equals {}',
    'day': 'the day of the month of {}',
    'haversine': 'the haversine distance between {} and {}',
    'year': 'the year of {}',
    'multiply_boolean': 'the product of {} and {}',
    'less_than_equal_to': 'whether {} is less than or equal to {}',
    'time_since_previous': 'the time since the previous instance of {}',
    'latitude': 'the latitude of {}',
    'greater_than': 'whether {} is greater than {}',
    'less_than': 'whether {} is less than {}',
    'multiply_numeric': 'the product of {} and {}',
    'not': 'the negation of {}',
    'subtract_numeric_scalar': 'the value of {} minus {feature.primitive.value}',
    'greater_than_equal_to': 'whether {} is greater than or equal to {}',
    'diff': 'the difference from the previous value of {}',
    'and': 'whether {} and {} are True',
    'add_numeric_scalar': 'the sum of {} and {feature.primitive.value}',
    'time_since': 'the amount of time from the cutoff time to {}',
    'cum_max': 'the cumulative maximum of {}',
    'modulo_numeric_scalar': 'the modulo of {} by {feature.primitive.value}',
    'minute': 'the minute value of {}',
    'not_equal_scalar': 'whether {} does not equal {feature.primitive.value}',
    'num_characters': 'the number of characters in {}',
    'cum_mean': 'the cumulative mean of {}',
    'divide_by_feature': 'the result of dividing {feature.primitive.value} by {}',
    'equal_scalar': 'whether {} equals {feature.primitive.value}',
    'hour': 'the hour value of {}',
    'is_weekend': 'whether {} occured on the weekend',
    'divide_numeric': 'the quotient of {} and {}',
    'cum_sum': 'the cumulative sum of {}',
    'less_than_equal_to_scalar': 'whether {} is less than or equal to {feature.primitive.value}',
    'longitude': 'the longitude of {}',
    'month': 'the month of {}',
    'multiply_numeric_scalar': 'the product of {} and {feature.primitive.value}',
    'less_than_scalar': 'whether {} is less than {feature.primitive.value}',
    'absolute': 'the absolute value of {}',
    'percentile': 'the percentile rank of {}',
    'is_null': 'whether {} is null',
    'scalar_subtract_numeric_feature': 'the value of {feature.primitive.value} minus {}',
    'greater_than_equal_to_scalar': 'whether {} is greater than or equal to {feature.primitive.value}',
    'negate': 'the negation of {}',
    'or': 'whether {} or {} is True',
    'subtract_numeric': 'the result of {} minus {}',
    'greater_than_scalar': 'whether {} is greater than {feature.primitive.value}',
    'isin': 'whether {} is in {feature[primitive][list_of_outputs]}'
}
